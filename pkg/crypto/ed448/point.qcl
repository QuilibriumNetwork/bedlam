package ed448

import (
	"errors"
	"fmt"
)

// Point is a point on the Goldilocks Curve.
type Point struct{ x, y, z, ta, tb Elt }

func (P Point) String() string {
	return fmt.Sprintf("x: %v\ny: %v\nz: %v\nta: %v\ntb: %v", P.x, P.y, P.z, P.ta, P.tb)
}

// FromAffine creates a point from affine coordinates.
func FromAffine(x, y *Elt) (*Point, error) {
	P := &Point{
		x:  *x,
		y:  *y,
		z:  One(),
		ta: *x,
		tb: *y,
	}
	if !(Curve{}).IsOnCurve(P) {
		return P, errors.New("point not on curve")
	}
	return P, nil
}

// isLessThan returns true if 0 <= x < y, and assumes that slices are of the
// same length and are interpreted in little-endian order.
func isLessThan(x, y []byte) bool {
	i := len(x) - 1
	for i > 0 && x[i] == y[i] {
		i--
	}
	return x[i] < y[i]
}

// FromBytes returns a point from the input buffer.
func FromBytes(in []byte) (*Point, error) {
	if len(in) < Size+1 {
		return nil, errors.New("wrong input length")
	}
	err := errors.New("invalid decoding")
	P := &Point{}
	signX := in[Size] >> 7
	copy(P.y[:], in[:Size])
	p := EP()
	if !isLessThan(P.y[:], p[:]) {
		return nil, err
	}

	u, v := &Elt{}, &Elt{}
	one := One()
	Sqr(u, &P.y)                // u = y^2
	Mul(v, u, &paramD)          // v = dy^2
	Sub(u, u, &one)             // u = y^2-1
	Sub(v, v, &one)             // v = dy^2-1
	isQR := InvSqrt(&P.x, u, v) // x = sqrt(u/v)
	if !isQR {
		return nil, err
	}
	Modp(&P.x) // x = x mod p
	if IsZero(&P.x) && signX == 1 {
		return nil, err
	}
	if signX != (P.x[0] & 1) {
		Neg(&P.x, &P.x)
	}
	P.ta = P.x
	P.tb = P.y
	P.z = One()
	return P, nil
}

// IsIdentity returns true is P is the identity Point.
func (P *Point) IsIdentity() bool {
	return IsZero(&P.x) && !IsZero(&P.y) && !IsZero(&P.z) && P.y == P.z
}

// IsEqual returns true if P is equivalent to Q.
func (P *Point) IsEqual(Q *Point) bool {
	l, r := &Elt{}, &Elt{}
	Mul(l, &P.x, &Q.z)
	Mul(r, &Q.x, &P.z)
	Sub(l, l, r)
	b := IsZero(l)
	Mul(l, &P.y, &Q.z)
	Mul(r, &Q.y, &P.z)
	Sub(l, l, r)
	b = b && IsZero(l)
	Mul(l, &P.ta, &P.tb)
	Mul(l, l, &Q.z)
	Mul(r, &Q.ta, &Q.tb)
	Mul(r, r, &P.z)
	Sub(l, l, r)
	b = b && IsZero(l)
	return b
}

// Neg obtains the inverse of the Point.
func (P *Point) Neg() { Neg(&P.x, &P.x); Neg(&P.ta, &P.ta) }

// ToAffine returns the x,y affine coordinates of P.
func (P *Point) ToAffine() (x, y Elt) {
	Inv(&P.z, &P.z)       // 1/z
	Mul(&P.x, &P.x, &P.z) // x/z
	Mul(&P.y, &P.y, &P.z) // y/z
	Modp(&P.x)
	Modp(&P.y)
	SetOne(&P.z)
	P.ta = P.x
	P.tb = P.y
	return P.x, P.y
}

// ToBytes stores P into a slice of bytes.
func (P *Point) ToBytes(out []byte) error {
	if len(out) < Size+1 {
		return errors.New("invalid decoding")
	}
	x, y := P.ToAffine()
	out[Size] = (x[0] & 1) << 7
	return ToBytes(out[:Size], &y)
}

// MarshalBinary encodes the receiver into a binary form and returns the result.
func (P *Point) MarshalBinary() (data []byte, err error) {
	data = make([]byte, Size+1)
	err = P.ToBytes(data[:Size+1])
	return data, err
}

// UnmarshalBinary must be able to decode the form generated by MarshalBinary.
func (P *Point) UnmarshalBinary(data []byte) error { Q, err := FromBytes(data); *P = *Q; return err }

// Double sets P = 2Q.
func (P *Point) Double() { P.Add(P) }

// Add sets P =P+Q..
func (P *Point) Add(Q *Point) {
	// This is formula (5) from "Twisted Edwards Curves Revisited" by
	// Hisil H., Wong K.KH., Carter G., Dawson E. (2008)
	// https://doi.org/10.1007/978-3-540-89255-7_20
	x1, y1, z1, ta1, tb1 := &P.x, &P.y, &P.z, &P.ta, &P.tb
	x2, y2, z2, ta2, tb2 := &Q.x, &Q.y, &Q.z, &Q.ta, &Q.tb
	x3, y3, z3, E, H := &P.x, &P.y, &P.z, &P.ta, &P.tb
	A, B, C, D := &Elt{}, &Elt{}, &Elt{}, &Elt{}
	t1, t2, F, G := C, D, &Elt{}, &Elt{}
	Mul(t1, ta1, tb1)  // t1 = ta1*tb1
	Mul(t2, ta2, tb2)  // t2 = ta2*tb2
	Mul(A, x1, x2)     // A = x1*x2
	Mul(B, y1, y2)     // B = y1*y2
	Mul(C, t1, t2)     // t1*t2
	Mul(C, C, &paramD) // C = d*t1*t2
	Mul(D, z1, z2)     // D = z1*z2
	Add(F, x1, y1)     // x1+y1
	Add(E, x2, y2)     // x2+y2
	Mul(E, E, F)       // (x1+y1)*(x2+y2)
	Sub(E, E, A)       // (x1+y1)*(x2+y2)-A
	Sub(E, E, B)       // E = (x1+y1)*(x2+y2)-A-B
	Sub(F, D, C)       // F = D-C
	Add(G, D, C)       // G = D+C
	Sub(H, B, A)       // H = B-A
	Mul(z3, F, G)      // Z = F * G
	Mul(x3, E, F)      // X = E * F
	Mul(y3, G, H)      // Y = G * H, T = E * H
}
